"""Form implementation generated from reading ui file 'PreviewScreen.ui'."""
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt6 import QtCore, QtGui, QtWidgets
from PIL import Image
from getIPAddress import getIpAddress
from PyQt6.QtCore import QTimer
import CameraControl
import CameraPreview
from pixelinkWrapper import PxLApi
import random


class Ui_Form(object):
    """PreviewScreen widget wrapper class."""

    def setupUi(self, Form):
        """Create UI for PreviewScreen.

        :param Form QWidget parent object
        """
        Form.setObjectName("Form")
        Form.resize(800, 480)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 149, 1))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active,
                         QtGui.QPalette.ColorRole.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(106, 110, 128))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active,
                         QtGui.QPalette.ColorRole.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active,
                         QtGui.QPalette.ColorRole.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active,
                         QtGui.QPalette.ColorRole.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active,
                         QtGui.QPalette.ColorRole.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active,
                         QtGui.QPalette.ColorRole.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 149, 1))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active,
                         QtGui.QPalette.ColorRole.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active,
                         QtGui.QPalette.ColorRole.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(89, 239, 150))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active,
                         QtGui.QPalette.ColorRole.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active,
                         QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active,
                         QtGui.QPalette.ColorRole.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active,
                         QtGui.QPalette.ColorRole.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active,
                         QtGui.QPalette.ColorRole.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 149, 1))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active,
                         QtGui.QPalette.ColorRole.HighlightedText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active,
                         QtGui.QPalette.ColorRole.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active,
                         QtGui.QPalette.ColorRole.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active,
                         QtGui.QPalette.ColorRole.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 127))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active,
                         QtGui.QPalette.ColorRole.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 149, 1))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive,
                         QtGui.QPalette.ColorRole.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(106, 110, 128))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive,
                         QtGui.QPalette.ColorRole.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive,
                         QtGui.QPalette.ColorRole.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive,
                         QtGui.QPalette.ColorRole.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive,
                         QtGui.QPalette.ColorRole.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive,
                         QtGui.QPalette.ColorRole.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 149, 1))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive,
                         QtGui.QPalette.ColorRole.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive,
                         QtGui.QPalette.ColorRole.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(89, 239, 150))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive,
                         QtGui.QPalette.ColorRole.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive,
                         QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive,
                         QtGui.QPalette.ColorRole.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive,
                         QtGui.QPalette.ColorRole.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive,
                         QtGui.QPalette.ColorRole.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 149, 1))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive,
                         QtGui.QPalette.ColorRole.HighlightedText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive,
                         QtGui.QPalette.ColorRole.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive,
                         QtGui.QPalette.ColorRole.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive,
                         QtGui.QPalette.ColorRole.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 127))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive,
                         QtGui.QPalette.ColorRole.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled,
                         QtGui.QPalette.ColorRole.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(106, 110, 128))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled,
                         QtGui.QPalette.ColorRole.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled,
                         QtGui.QPalette.ColorRole.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled,
                         QtGui.QPalette.ColorRole.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled,
                         QtGui.QPalette.ColorRole.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled,
                         QtGui.QPalette.ColorRole.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled,
                         QtGui.QPalette.ColorRole.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled,
                         QtGui.QPalette.ColorRole.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled,
                         QtGui.QPalette.ColorRole.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled,
                         QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled,
                         QtGui.QPalette.ColorRole.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled,
                         QtGui.QPalette.ColorRole.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 149, 1))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled,
                         QtGui.QPalette.ColorRole.HighlightedText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled,
                         QtGui.QPalette.ColorRole.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled,
                         QtGui.QPalette.ColorRole.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled,
                         QtGui.QPalette.ColorRole.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 127))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled,
                         QtGui.QPalette.ColorRole.PlaceholderText, brush)
        Form.setPalette(palette)
        self.cameraControl = CameraControl.CameraControl()
        self.cameraHandles = self.cameraControl.setUpCamera(2)
        global cameraHandles
        cameraHandles = self.cameraHandles
        self.layoutWidget = QtWidgets.QWidget(parent=Form)
        self.layoutWidget.setGeometry(QtCore.QRect(0, 440, 801, 57))
        self.layoutWidget.setObjectName("layoutWidget")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.layoutWidget)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setSpacing(0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.pressure_label = QtWidgets.QLabel(parent=self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(25)
        self.pressure_label.setFont(font)
        self.pressure_label.setStyleSheet("color: rgb(255, 149, 1);")
        self.pressure_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignHCenter
                                         | QtCore.Qt.AlignmentFlag.AlignTop)
        self.pressure_label.setObjectName("status_label")
        self.horizontalLayout_2.addWidget(self.pressure_label)
        self.dissolved_oxygen_label = QtWidgets.QLabel(
            parent=self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(25)
        self.dissolved_oxygen_label.setFont(font)
        self.dissolved_oxygen_label.setStyleSheet("color: rgb(255, 149, 1);")
        self.dissolved_oxygen_label.setAlignment(
            QtCore.Qt.AlignmentFlag.AlignHCenter
            | QtCore.Qt.AlignmentFlag.AlignTop)
        self.dissolved_oxygen_label.setObjectName("pressure_label")
        self.horizontalLayout_2.addWidget(self.dissolved_oxygen_label)
        self.status_label = QtWidgets.QLabel(parent=self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(25)
        self.status_label.setFont(font)
        self.status_label.setStyleSheet("color: rgb(255, 149, 1);")
        self.status_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignHCenter
                                       | QtCore.Qt.AlignmentFlag.AlignTop)
        self.status_label.setObjectName("dissolved_oxygen_label")
        self.horizontalLayout_2.addWidget(self.status_label)
        self.layoutWidget1 = QtWidgets.QWidget(parent=Form)
        self.layoutWidget1.setGeometry(QtCore.QRect(0, 400, 801, 57))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.layoutWidget1)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.temperature_label = QtWidgets.QLabel(parent=self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(25)
        self.temperature_label.setFont(font)
        self.temperature_label.setStyleSheet("color: rgb(255, 149, 1);")
        self.temperature_label.setAlignment(
            QtCore.Qt.AlignmentFlag.AlignCenter)
        self.temperature_label.setObjectName("temperature_label")
        self.horizontalLayout.addWidget(self.temperature_label)
        self.ph_label = QtWidgets.QLabel(parent=self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(25)
        self.ph_label.setFont(font)
        self.ph_label.setStyleSheet("color: rgb(255, 149, 1);")
        self.ph_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.ph_label.setObjectName("ph_label")
        self.horizontalLayout.addWidget(self.ph_label)
        self.ip_label = QtWidgets.QLabel(parent=self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(25)
        self.ip_label.setFont(font)
        self.ip_label.setStyleSheet("color: rgb(255, 149, 1);")
        self.ip_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.ip_label.setObjectName("ip_label")
        self.horizontalLayout.addWidget(self.ip_label)
        self.layoutWidget2 = QtWidgets.QWidget(parent=Form)
        self.layoutWidget2.setGeometry(QtCore.QRect(0, 0, 801, 401))
        self.layoutWidget2.setObjectName("layoutWidget2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.layoutWidget2)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setSpacing(0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.left_camera = QtWidgets.QLabel(parent=self.layoutWidget2)
        self.left_camera.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.horizontalLayout_3.addWidget(self.left_camera)
        self.right_camera = QtWidgets.QLabel(parent=self.layoutWidget2)
        self.right_camera.setStyleSheet(
            "background-color: rgb(255, 255, 255);")
        self.right_camera.setObjectName("right_camera")
        self.horizontalLayout_3.addWidget(self.right_camera)

        self.setLabelDefaults()
        self.retranslateUi(Form)
        self.ipAddressRefreshTimer = QTimer(Form)
        self.ipAddressRefreshTimer.setInterval(1000)
        # self.ipAddressRefreshTimer.timeout.connect(self.setIPAddressLabel)
        self.cameraPreviewRefreshTimer = QTimer(Form)
        self.cameraPreviewRefreshTimer.setInterval(int((1 / 1) * 1000))
        self.cameraPreviewRefreshTimer.timeout.connect(
            self.startPreviewImageCapture)
        self.ipAddressRefreshTimer.start()
        self.cameraDefaults()
        self.capturing = False
        self.active = True
        self.cameraPreviewRefreshTimer.start()
        self.sensorTimer = QTimer(Form)
        self.sensorTimer.timeout.connect(self.randomSensorValue)
        self.sensorTimer.timeout.connect(self.validateSensors)
        self.sensorTimer.start(2000)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        """Set default labels.

        :param Form Parent QWidget parent object.
        """
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))

    def setLabelDefaults(self):
        """Set label defaults for when the application starts."""
        self.pressure_label.setText("P:300.000 mbar")
        self.dissolved_oxygen_label.setText("DO: 100.000 mg/L")
        self.status_label.setText("In Progress")
        self.temperature_label.setText("Temp: 25.068C")
        self.ph_label.setText("pH: 7.000")
        self.ip_label.setText("IP: 192.168.0.50")
        image = Image.open("coral.jpeg")
        image.thumbnail((400, 400))
        image.save("thumbnail.jpeg")
        self.left_camera.setStyleSheet("")
        self.right_camera.setStyleSheet("")
        self.left_camera.setPixmap(QtGui.QPixmap("thumbnail.jpeg"))
        self.right_camera.setPixmap(QtGui.QPixmap("thumbnail.jpeg"))

    def setIPAddressLabel(self, ipAddress: str = getIpAddress("wlan0")):
        """Set IP address label.

        :param ipAddress IP address of the wireless network adapter.
        """
        self.ip_label.setText("IP: {}".format(ipAddress))

    def setTemperatureLabel(self, temperature: float):
        """Set temperature label. Temperature is rounded to 3 decimal points.

        :param temperature Temperature of the environment in Celsius
        """
        self.temperature_label.setText("Temp: {}C".format(round(
            temperature, 3)))

    def setPressureLabel(self, pressure: float):
        """Set pressure label. Pressure is rounded to 3 decimal points.

        :param pressure Pressure of the environment in mbar
        """
        self.pressure_label.setText("P: {}mbar".format(round(pressure, 3)))

    def setDissolvedOxygenLabel(self, dissolvedOxygen: float):
        """Set dissolved oxygen label. DO is rounded to 3 decimal points.

        :param dissolvedOxygen DO of the environment in mg/L
        """
        self.dissolved_oxygen_label.setText("DO: {} mg/L".format(
            round(dissolvedOxygen, 3)))

    def setpHLabel(self, ph: float):
        """Set pH label. pH is rounded to 3 decimal points.

        :param ph pH of the environment
        """
        self.ph_label.setText("pH: {}".format(round(ph, 3)))

    def setStatusLabel(self, inProgress: bool):
        """Set status label.

        :param inProgress Bool value that indicates in a study is in progress.
        """
        if inProgress:
            self.status_label.setText("In Progress")
        else:
            self.status_label.setText("No Capture")

    def randomSensorValue(self):
        """Create random label values. Used for demo purposes."""
        # Creates the pH sensor String with a format of X.XXX where X is a
        # random digit
        ph_sensor_decimal = random.randint(0, 14)
        ph_sensor_hundred = random.randint(100, 999)
        ph_sensor = f"{ph_sensor_decimal}.{ph_sensor_hundred:03d}"

        # Creates the temp sensor String with a format of XX.XXX where
        # X is a random digit
        temp_sensor_decimal = random.randint(10, 99)
        temp_sensor_hundred = random.randint(100, 999)
        temp_sensor = f"{temp_sensor_decimal}.{temp_sensor_hundred:03d}C"

        # Creates the do sensor String with a format of X.XXXX where X
        # is a random digit
        do_sensor_decimal = random.randint(0, 9)
        do_sensor_hundred = random.randint(1000, 9999)
        do_sensor = f"{do_sensor_decimal}.{do_sensor_hundred:03d}"

        # Creates the baro sensor String with a format of XXXXXX where X
        # is a random digit
        baro_sensor = random.randint(100000, 999999)
        ip_parts = [str(random.randint(0, 255)) for _ in range(4)]
        random_ip = ".".join(ip_parts)

        # Assigns the values to the sensor labels
        self.dissolved_oxygen_label.setText("DO: " + str(do_sensor) + " mg/L")
        self.pressure_label.setText("P: " + str(baro_sensor) + " mbar")
        self.ph_label.setText("pH: " + str(ph_sensor))
        self.temperature_label.setText("Temp: " + str(temp_sensor))
        self.ip_label.setText("IP: " + random_ip)
        
    def validateSensors(self):
        """Verify if Sensors are within parameters."""
        string = self.ph_label.text()
        string = string.replace(" ", "")
        strings = string.split(":")
        ph_value = float(strings[1])

        string = self.pressure_label.text()
        string = string.replace(" ", "")
        strings = string.split(":")
        pressure_value = float(strings[1])

        string = self.temperature_label.text()
        string = string.replace(" ", "")
        strings = string.split(":")
        temperature_value = float(strings[1])

        string = self.dissolved_oxygen_label.text()
        string = string.replace(" ", "")
        strings = string.split(":")
        dissolved_oxygen_value = float(strings[1])
        """Checks if ph is between 0 and 14."""
        if(ph_value < 0 or ph_value > 14):
            self.status_label.setText("pH Sensor Error")
            print("pH is out of range: " + str(ph_value) + ". Acceptable Range is between 0 and 14.")
        """Checks if pressure is between 1,013.25 and 1040.00."""
        if(pressure_value < 1013.25 or pressure_value > 1040.00):
            self.status_label.setText("Pressure Sensor Error")
            print("Pressure is out of range: " + str(pressure_value) + ". Acceptable Range is between 1,013.25 and 1040.00.")
        """Checks if temperature is between -2 and 32."""
        if(temperature_value < -2 or temperature_value > 32):
            self.status_label.setText("Temperature Sensor Error")
            print("Temp is out of range: " + str(temperature_value) + ". Acceptable Range is between -2 and 32.")
        """Checks if dissolved oxygen is between 0 and 100."""
        if(dissolved_oxygen_value < 0 or dissolved_oxygen_value > 100):
            self.status_label.setText("D.O. Sensor Error")
            print("Dissolved Oxygen is out of range: " + str(dissolved_oxygen_value) + ". Acceptable Range is between 0 and 100.")    


    def startPreviewImageCapture(self):
        """Generate preview if preview window is active."""
        if self.active:
            CameraPreview.getPreviewImage(self.cameraHandles, "Preview")
            self.setCameraPreviewLabels()

    def setCameraPreviewLabels(self):
        """Set camera preview labels with generated preview images."""
        left_image = "Preview2.jpeg"
        right_image = "Preview1.jpeg"
        self.left_camera.setPixmap(QtGui.QPixmap(left_image))
        self.right_camera.setPixmap(QtGui.QPixmap(right_image))

    def cameraDefaults(self):
        """Set default camera setting upon boot."""
        self.cameraControl.autoWhiteBalance(self.cameraHandles)
        self.cameraControl.setExposure(self.cameraHandles, 1 / 15, mode="")
        self.cameraControl.setFocus(self.cameraHandles)
        self.cameraControl.setGain(self.cameraHandles)
        self.cameraControl.setRegionOfInterest(self.cameraHandles)
        self.cameraControl.setWhiteBalance(self.cameraHandles)
        for camera in self.cameraHandles:
            PxLApi.setPreviewState(camera, PxLApi.PreviewState.STOP)


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(form)
    form.show()
    sys.exit(app.exec())
